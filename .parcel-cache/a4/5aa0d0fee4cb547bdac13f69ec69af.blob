"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _parentEl = /*#__PURE__*/new WeakMap();

class SearchView {
  constructor() {
    _parentEl.set(this, {
      writable: true,
      value: document.querySelector('.search')
    });

    _defineProperty(this, "clearInput", () => {
      _classPrivateFieldGet(this, _parentEl).querySelector('search__field').value = '';
    });
  }

  getQuery() {
    //Gets user search query
    const query = _classPrivateFieldGet(this, _parentEl).querySelector('.search__field').value;

    console.log(query);
    clearInput();
    return query;
  }

  addHandlerSearch(handler) {
    _classPrivateFieldGet(this, _parentEl).addEventListener('submit', function (e) {
      e.preventDefault();
      handler();
    });
  }

}

var _default = new SearchView();

exports.default = _default;