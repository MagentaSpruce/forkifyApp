"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadRecipe = exports.deleteBookmark = exports.addBookmark = exports.updateServings = exports.getSearchResultsPage = exports.loadSearchResults = exports.loadRecipe = exports.state = void 0;

var _regeneratorRuntime = require("regenerator-runtime");

var _config = require("./config.js");

var _helpers = require("./helpers");

const state = {
  recipe: {},
  search: {
    query: '',
    results: [],
    page: 1,
    resultsPerPage: _config.RES_PER_PAGE
  },
  bookmarks: []
}; //Pulls data from Forkify API, then sends data to export state which then sends it to the controller where it is used for rendering

exports.state = state;

const loadRecipe = async function (id) {
  try {
    const data = await (0, _helpers.getJSON)(`${_config.API_URL}/${id}`); // const res = await fetch(`${API_URL}/${id}`);
    // const data = await res.json();
    // console.log(res, data);
    // if (!res.ok) throw new Error(`${data.message}(${res.status})`);

    const {
      recipe
    } = data.data;
    state.recipe = {
      id: recipe.id,
      title: recipe.title,
      publisher: recipe.publisher,
      sourceURL: recipe.sourceURL,
      image: recipe.image_url,
      servings: recipe.servings,
      cookingTime: recipe.cooking_time,
      ingredients: recipe.ingredients
    }; //Keeps recipes bookmarked on reloads

    if (state.bookmarks.some(bookmark => bookmark.id === id)) state.recipe.bookmarked = true;else state.recipe.bookmarked = false; // console.log(state.recipe);
  } catch (err) {
    //Temp error handler
    // console.error(`err ðŸ‘»`);
    recipeView.renderError();
    throw err;
  }
};

exports.loadRecipe = loadRecipe;

const loadSearchResults = async function (query) {
  try {
    state.search.query = query;
    const data = await (0, _helpers.getJSON)(`${_config.API_URL}?search=${query}`);
    console.log(data); // this is the array of all the objects - map creates new array with new objects

    state.search.results = data.data.recipes.map(recipe => {
      return {
        id: recipe.id,
        title: recipe.title,
        publisher: recipe.publisher,
        image: recipe.image_url
      };
    }); //resets search page back to 1

    state.search.page = 1;
  } catch (err) {
    // console.error(`err ðŸ‘»`);
    recipeView.renderError();
    throw err;
  }
};

exports.loadSearchResults = loadSearchResults;

const getSearchResultsPage = function (page = state.search.page) {
  state.search.page = page;
  const start = (page - 1) * state.search.resultsPerPage; // 0

  const end = page * state.search.resultsPerPage; // 9

  return state.search.results.slice(start, end);
};

exports.getSearchResultsPage = getSearchResultsPage;

const updateServings = function (newServings) {
  state.recipe.ingredients.forEach(ing => {
    ing.quantity = ing.quantity * newServings / state.recipe.servings; // newQt = oldQt * newServings / oldServings // 2 * 8 / 4 = 4
  });
  state.recipe.servings = newServings;
};

exports.updateServings = updateServings;

const persistBookmarks = function () {
  localStorage.setItem('bookmarks', JSON.stringify(state.bookmarks));
};

const addBookmark = function (recipe) {
  //Add bookmark
  state.bookmarks.push(recipe); //Mark current recipe as bookmarked.

  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
  persistBookmarks();
};

exports.addBookmark = addBookmark;

const deleteBookmark = function (id) {
  const index = state.bookmarks.findIndex(el => el.id === id);
  state.bookmarks.splice(index, 1); //Mark current recipe as no longer bookmarked.

  if (id === state.recipe.id) state.recipe.bookmarked = false;
  persistBookmarks();
};

exports.deleteBookmark = deleteBookmark;

const init = function () {
  const storage = localStorage.getItem('bookmarks');
  if (storage) state.bookmarks = JSON.parse(storage);
};

init(); // const clearBookmarks = function(){
//   localStorage.clear('bookmarks');
// };
// clearBookmarks();

const uploadRecipe = async function (newRecipe) {
  const ingredients = Object.entries(newRecipe).filter(entry => entry[0].startsWith('ingredient') && entry[1] !== '').map(ing => {
    const ingArr = ing[1].replaceAll(' ', '').split(',');
    if (ingArr.length !== 3) throw new Error('Wrong ingedient format! Please use correct format.');
    const [quantity, unit, description] = ingArr;
    return {
      quantity: quantity ? +quantity : null,
      unit,
      description
    };
  });
};

exports.uploadRecipe = uploadRecipe;